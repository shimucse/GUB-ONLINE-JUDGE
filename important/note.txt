#backend
    --install 
        npm init
        npm install --save express
        npm install -g nodemon
        npm install --save axios
        npm install --save cors
        "start": "nodemon index.js"(npm start)
         npm install --save uuid//help to generate new id
          g++ filename.cpp
          ./a .out
          shell command inside nodejs


  const language = req.body.language;
  const code = req.body.code;   
  const {language ,code} = req.body;
  const {language='cpp',code} = req.body;

  return res.json(req.body)

if(code === undefined){
     return res.status(400).json({success:false, error:"Empty code body!"});
   }
//need to generate a c++ file with content from the request 
// we need to run the file and send the response
//Message queue {redis}(install redis)
start server:redis-sever
 redis-cli
127.0.0.1:6379> ping
PONG

npm install  bull --save

npm i moment
install codemirror 3.2.1

install MDEditor for text editor

for redirect to another page :
npm i react-router-dom // for using different page
import { BrowserRouter, Routes, Route,Link,Router,Outlet } from "react-router-dom";
import { useNavigate } from "react-router-dom"; for go another page
/**********************************
//for pass value to other page 
setProblemId(id);
      navigate("/ProblemDisplay",{state:{id:id}});

import { useLocation} from "react-router-dom";
const location = useLocation();
  console.log("id:  "+location.state.id);

get data with id :
   client: const data =  Axios.get(`http://localhost:5000/problemAdd/fetch/${id}`);  
 Server: router.get('/fetch/:id',function(req,res){

for print response
            console.log("response data",response.data);//not +

.join() for only array

install jsonwebtoken on backend
allow us to sign 
npm add jsonwebtoken


window.confirm and alert are same
JSON.parse:When receiving data from a web server, the data is always a string.

Parse the data with JSON.parse(), and the data becomes a JavaScript object.

In frontend/client 
npm add jsonwebtoken its shows errror while import 

thats why 
npm i jwt-decode 
import jwtDecode from 'jwt-decode'
const decoded = jwtDecode(token)
console.log(decoded)
//it worked

for decoding in backend



if inside return for display Html
{token?<h1>Token is true</h1>:<h1>token not true</h1>}

/***********************************
//For display img:
    const [img, setImg] = useState();

  <h2>Add Image:</h2>
        <input
              type="file" 
              onChange={(e) =>setImg(URL.createObjectURL(e.target.files[0]))}
              /><br/><br/>

      <img src={img} />



Why image handling is different on Express?
When you send form data to the express backend, 
express is equipped with handling the application/x-www-form-urlencoded and the text/plain encodings, it cannot process the multipart/form-data encoding, 
which is primarily used for uploading files. This is where Multer comes in. A node.js middleware that will handle multipart encoded forms for us.


//*************************
routes.get('/', UploadController.index);
routes.post('/', upload('img'), UploadController.store);
routes.delete('/:id', UploadController.destroy);


/******************************
declare an array object using state  :
  const [problemSetterInputOutput, setProblemSetterInputOutput] = useState([]);
  const [problemSetterAllInputTestCase, setProblemSetterAllInputTestCse] = useState([]);
  const [problemSetterAllOutput, setProblemSetterAllOutput] = useState([]);
const addTestCase =()=>{
    
      let inputOutputobj={
          setterInput:problemSetterAllInputTestCase,
          setterOutput:problemSetterAllOutput
      }
      setProblemSetterInputOutput([inputOutputobj, ...problemSetterInputOutput]);
   
  }
  {
              problemSetterInputOutput.map((obj,index)=>(
                 <div key={index}>
                   <span> input:{obj.setterInput}</span>
                   <span>output:{obj.setterOutput}</span>
                 </div>
              )
              )
 }
 ///*********Map without html and check if the array is empty*************************//
  Array.isArray(problemSetterInputOutput)
            ? problemSetterInputOutput.map((obj, key)  => {
                console.log("setterInputoutput:"+obj.setterInput);
            }):console.log("problemSetterInputOutput is empty")

///********* loop an array of objects using foreach*******************************//
 Array.isArray(job.problemSetterAllInputOutputTestCase)
                            ?job.problemSetterAllInputOutputTestCase.forEach(async(obj,index)=>{
                                   console.log(`input: ${obj.setterInput}`),

                            });
/************timer******************
npm i react-icon
                            
npm i style-components


/*********************Date Time picker*************************/
npm install react-datepicker --save  
import React, { useState } from "react";  
import DatePicker from 'react-datepicker';  
import addDays from 'date-fns/addDays'  
import "react-datepicker/dist/react-datepicker.css";  

  const [startDate, setStartDate] = useState(new Date());  

  
// CSS Modules, react-datepicker-cssmodules.css  
// import 'react-datepicker/dist/react-datepicker-cssmodules.css';  
import addDays from 'date-fns/addDays'  

tutorial from javaPoint
https://www.javatpoint.com/react-date-picker
  
const Example = () => {  
  const [startDate, setStartDate] = useState(new Date());  
  return (  
    <DatePicker selected={startDate} onChange={(date) =>   
setStartDate(date)} />  
  );  
};  


   <DatePicker  

        className="myDatePicker"
        selected={ startDate}  
        onChange={(date) =>   
        setStartDate(date)} 
        showTimeSelect  
        timeFormat="HH:mm"  
        timeIntervals={20}  
        timeCaption="time"  
        dateFormat="MMMM d, yyyy h:mm aa"  
        minDate={new Date()}  
        maxDate={addDdcays(new Date(), 7)}  
  />  

/***********  how to get a decimal portion of a number ***********************/
 console.log("day"+day);
  let val = ((day + "").split(".")[1]);
  console.log("val"+val);
   day = Math.abs(day)
  let hour = (day - Math.floor(day));
  console.log("hour"+hour);


?**************************send a props value **************************/

  <CountdownTimer day={day}/>


export default function CountdownTimer(days) {
    console.log("days inside countDown"+days.day);
}

/*****************useEffect***********************************/
useEffect(()=> {     
      setCode(stubs[language]);
   },[language]);


/*****************deploying project **************************/
https://theboroer.github.io/localtunnel-www/
Localtunnel allows you to easily share a web service on your local development machine without messing with DNS and firewall settings.

Localtunnel will assign you a unique publicly accessible url that will proxy all requests to your locally running webserver.


npm install -g localtunnel
lt --port 3000


if error occur:then
sudo ufw disable

for endPoint ip : "hostname -I"
for ipv4 and ipv6:there is link under submit if click the link it will show ipv4 address

ifconfig -a

/*****************************after timmer another function will be executed***********************************/
const [showEndScreen, setShowEndScreen] = useState({
    show: false,
    message: "End of Contest",
    contestName :contestName
  });

  useEffect(()=>{
              setShowEndScreen({ ...showEndScreen, show: false });
              //have to learn more about spreed operator 

  }[]);

////////////////**********************kill event handler************************************
The button element in the form has a type of submitso every time the user clicks it, the submit event is triggered. We set an onSubmit event handler on the form to
listen to this event. In this handler, we call preventDefault() on the Event object, to prevent the page from refreshing when the form is submitted
/*router.get('/fetch/:id',async function(req,res){
      fetchid = req.params.id;
      console.log("fetchid "+ fetchid);



      try{
        const data = await problemDB.find({id:fetchid})
        console.log('data'+data);
        res.send(data);

    }catch(err){
         console.log(err);
         res.status(500).json({ error: 'server error' });

    }

 });*/ // it take too long to response 